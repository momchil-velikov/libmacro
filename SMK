# -*- mode: python -*-
from os import environ, path
gtest_dir = path.join(os.environ['HOME'], 'src', 'gtest-1.7.0')
gtest_incdir = path.join(gtest_dir, 'include')
gtest_libdir = path.join(gtest_dir, 'lib' + path.sep)

benchmark_dir = path.join(os.environ['HOME'], 'src', 'benchmark')
benchmark_incdir = path.join(benchmark_dir, 'include')
benchmark_libdir = path.join(benchmark_dir, 'src' + path.sep)

smk.env.std = 'c++11'
smk.env.flags = ['-pthread', '-pedantic', '-Wall', '-Wextra']

# libmacro library
cc = smk.env.toolchain.get_compiler(smk.lang.CXX)
objs = smk.compile_sources(['libmacro.cc'], build = cc)
libmacro = smk.make_static_lib('macro', objs = objs)
libmacro.default = True

# Test suite
cfg = smk.environ(smk.env)
cfg.include = [gtest_incdir]
cc = smk.env.toolchain.get_compiler(smk.lang.CXX, env = cfg)
objs = smk.compile_sources(['libmacro-test-func-like.cc', 'libmacro-test-obj-like.cc'],
                           build = cc)
libmacro_test = smk.make_program('libmacro-test', objs = objs,
                                 libs=[libmacro, gtest_libdir, 'gtest', 'gtest_main'])
libmacro_test.default = True

cfg = smk.environ(smk.env)
cfg.include = [benchmark_incdir]
cc = smk.env.toolchain.get_compiler(smk.lang.CXX, env = cfg)
objs = smk.compile_source('libmacro-benchmark.cc', build = cc)
libmacro_bench = smk.make_program('libmacro-bench', objs = [objs],
                                  libs = [libmacro,
                                          gtest_libdir, 'gtest', 'gtest_main',
                                          benchmark_libdir, 'benchmark']);
libmacro_bench.default = True
